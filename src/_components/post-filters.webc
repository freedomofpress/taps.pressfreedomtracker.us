<div class="filter-group">
    <label>Search posts:</label>
    <input type="text" class="filter-search" placeholder="Search content...">
</div>

<div class="filter-group">
    <label>Platform:</label>
    <select class="filter-platform">
        <option value="">All platforms</option>
        <option value="Twitter">Twitter</option>
        <option value="Truth Social">Truth Social</option>
    </select>
</div>

<div class="filter-group">
    <button type="button" class="filter-clear">Ã— Clear all filters</button>
</div>

<post-full-template></post-full-template>

<script>
    const newNode = (html_str) => new DOMParser()
        .parseFromString(html_str, "text/html")
        .body
        .firstElementChild

    class PostFiltersElement extends HTMLElement {
        constructor() {
            super()
            this.searchInput = null
            this.platformSelect = null
            this.clearButton = null
            this.allPosts = []
            this.filteredPosts = []
            this.targetContainer = null
            this.showMoreButton = null
            this.showAllButton = null
            this.postsPerPage = 25
            this.currentPage = 1
            this.templates = {}
        }

        connectedCallback() {
            // Use requestAnimationFrame to ensure DOM is fully rendered
            requestAnimationFrame(() => {
                this.getTemplates()
                this.initializeElements()
                this.loadPosts()
            })
        }

        getTemplates() {
            this.templates.post = this.querySelector('template[data-post-template]').innerHTML
            this.templates.tag = this.querySelector('template[data-tag-template]').innerHTML
            this.templates.type = this.querySelector('template[data-type-template]').innerHTML
        }

        async loadPosts() {
            try {
                const response = await fetch('/posts.json')
                if (response.ok) {
                    this.allPosts = await response.json()
                    this.filteredPosts = [...this.allPosts]
                    this.findTargetContainer()
                    this.renderPosts()
                }
            } catch (error) {
                console.error('Failed to load posts:', error)
            }
        }

        findTargetContainer() {
            // Look for the container where posts should be rendered
            // Try multiple possible selectors
            this.targetContainer =
                document.querySelector('post-list') ||
                document.querySelector('.post-list') ||
                document.querySelector('[data-post-container]') ||
                document.querySelector('main')

            if (!this.targetContainer) {
                console.warn('Could not find target container for posts')
            } else {
                this.createShowMoreButton()
                this.hidePaginationLink()
            }
        }

        hidePaginationLink() {
            // Hide the static pagination link when JS is running
            const paginationLink = document.querySelector('#pagination-link')
            if (paginationLink) {
                paginationLink.style.display = 'none'
            }
        }

        createShowMoreButton() {
            this.showMoreButton = document.createElement('button')
            this.showMoreButton.type = 'button'
            this.showMoreButton.className = 'show-more-button'
            this.showMoreButton.textContent = 'Show more posts'
            this.showMoreButton.style.cssText = `
                font-size: var(--font-size-base);
                padding: 0.75rem 1.5rem;
                margin: var(--line-height-base) 0.5rem var(--line-height-base) 0;
                background: transparent;
                color: var(--color-base);
                border: 1px solid var(--color-border);
                cursor: pointer;
                display: inline-block;
            `
            this.showMoreButton.addEventListener('click', () => this.showMorePosts())

            this.showAllButton = document.createElement('button')
            this.showAllButton.type = 'button'
            this.showAllButton.className = 'show-all-button'
            this.showAllButton.textContent = 'Show all posts'
            this.showAllButton.style.cssText = `
                font-size: var(--font-size-base);
                padding: 0.75rem 1.5rem;
                margin: var(--line-height-base) 0;
                background: transparent;
                color: var(--color-muted);
                border: 1px solid var(--color-border);
                cursor: pointer;
                display: inline-block;
            `
            this.showAllButton.addEventListener('click', () => this.showAllPosts())
        }

        initializeElements() {
            this.searchInput = this.querySelector('.filter-search')
            this.platformSelect = this.querySelector('.filter-platform')
            this.clearButton = this.querySelector('.filter-clear')

            this.bindEvents()
        }

        bindEvents() {
            this.searchInput?.addEventListener('input', () => this.applyFilters())
            this.platformSelect?.addEventListener('change', () => this.applyFilters())
            this.clearButton?.addEventListener('click', () => this.clearFilters())
        }

        applyFilters() {
            const searchTerm = this.searchInput?.value.toLowerCase() || ''
            const platform = this.platformSelect?.value || ''

            // Filter the data instead of DOM elements
            this.filteredPosts = this.allPosts.filter(post => {
                let visible = true

                // Text search
                if (searchTerm) {
                    const content = post.content?.toLowerCase() || ''
                    if (!content.includes(searchTerm)) {
                        visible = false
                    }
                }

                // Platform filter
                if (platform && post.platform !== platform) {
                    visible = false
                }

                return visible
            })

            // Reset pagination when filters change
            this.currentPage = 1

            // Re-render with filtered data
            this.renderPosts()

            // Dispatch custom event for other components to listen to
            this.dispatchEvent(new CustomEvent('filtersChanged', {
                detail: {
                    searchTerm,
                    platform,
                    filteredCount: this.filteredPosts.length,
                    totalCount: this.allPosts.length
                },
                bubbles: true
            }))
        }

        renderPosts() {
            if (!this.targetContainer) return

            // Clear existing posts and pagination buttons
            const existingPosts = this.targetContainer.querySelectorAll('article[data-hash]')
            existingPosts.forEach(post => post.remove())

            const existingShowMore = this.targetContainer.querySelector('.show-more-button')
            if (existingShowMore) {
                existingShowMore.remove()
            }

            const existingShowAll = this.targetContainer.querySelector('.show-all-button')
            if (existingShowAll) {
                existingShowAll.remove()
            }

            // Calculate posts to show
            const postsToShow = this.filteredPosts.slice(0, this.currentPage * this.postsPerPage)

            // Render visible posts
            postsToShow.forEach(post => {
                const article = this.createPostElement(post)
                this.targetContainer.appendChild(article)
            })

            // Add pagination buttons if there are more posts to show
            if (postsToShow.length < this.filteredPosts.length) {
                const remaining = this.filteredPosts.length - postsToShow.length
                const nextBatch = Math.min(this.postsPerPage, remaining)

                // Create a container for the buttons
                const buttonContainer = document.createElement('div')
                buttonContainer.style.cssText = `
                    text-align: center;
                    margin: var(--line-height-base) 0;
                `

                // Update button text
                this.showMoreButton.textContent = `Show ${nextBatch} more posts`
                this.showAllButton.textContent = `Show all ${remaining} posts`

                // Add the "Show more" button
                buttonContainer.appendChild(this.showMoreButton)

                // Add the "Show all" button only if there's more than one additional page
                if (remaining > this.postsPerPage) {
                    buttonContainer.appendChild(this.showAllButton)
                }

                this.targetContainer.appendChild(buttonContainer)
            }
        }

        showMorePosts() {
            this.currentPage++
            this.renderPosts()
        }

        showAllPosts() {
            // Calculate how many pages needed to show all posts
            this.currentPage = Math.ceil(this.filteredPosts.length / this.postsPerPage)
            this.renderPosts()
        }

        createPostElement(post) {
            // Fill out the values of the template string
            // kinda like a lightweight template language
            const postString = Object.entries(post).reduce(
                (str, [key, value]) => str.replaceAll(`{{ ${key} }}`, value),
                this.templates.post
            )
            const postEl = newNode(postString)

            // A few bits require special handling
            // -----------------------------------

            // Replace date with formatted date
            const dateObj = new Date(post.date)
            const formattedDate = dateObj.toLocaleString('en-US', {
                month: 'long',
                day: 'numeric',
                year: 'numeric'
            })
            postEl.querySelector('[data-date]').textContent = formattedDate

            // Replace tags with actual tag elements
            const tagsContainer = postEl.querySelector('[data-tags]')
            const tagNodes = post?.tags?.map(
                tag => newNode(this.templates.tag.replaceAll("{{ tag }}", tag))
            )
            tagsContainer.innerHTML = '' // Clear existing content
            tagNodes?.forEach(tagNode => tagsContainer.appendChild(tagNode))

            // Replace types with actual type elements
            const typesContainer = postEl.querySelector('[data-types]')
            const typeNodes = post?.type?.map(
                type => newNode(this.templates.type.replaceAll("{{ type }}", type))
            )
            typesContainer.innerHTML = '' // Clear existing content
            typeNodes?.forEach(typeNode => typesContainer.appendChild(typeNode))

            // Replace targets with appropriate formatting
            const targetsContainer = postEl.querySelector('[data-targets]')
            if (post.secondaryTarget && post.primaryTarget !== post.secondaryTarget) {
                targetsContainer.innerHTML = `
                    <span>${this.escapeHtml(post.primaryTarget)}</span>
                    (<span>${this.escapeHtml(post.secondaryTarget)}</span>)
                `
            } else {
                targetsContainer.innerHTML = `<span>${this.escapeHtml(post.primaryTarget)}</span>`
            }

            return postEl
        }

        getContentSizeClass(text) {
            if (text.length > 500) return 'long'
            if (text.length > 200) return 'medium'
            return 'short'
        }

        escapeHtml(text) {
            const div = document.createElement('div')
            div.textContent = text
            return div.innerHTML
        }

        clearFilters() {
            if (this.searchInput) this.searchInput.value = ''
            if (this.platformSelect) this.platformSelect.value = ''
            this.filteredPosts = [...this.allPosts]
            this.currentPage = 1  // Reset pagination
            this.renderPosts()

            // Dispatch event
            this.dispatchEvent(new CustomEvent('filtersChanged', {
                detail: {
                    searchTerm: '',
                    platform: '',
                    filteredCount: this.filteredPosts.length,
                    totalCount: this.allPosts.length
                },
                bubbles: true
            }))
        }
    }

    // Register the custom element
    customElements.define('post-filters', PostFiltersElement)
</script>

<style webc:scoped="post-filters">
    :host {
        margin-bottom: var(--line-height-base);
    }

    .filter-group {
        margin-bottom: var(--line-height-base);
    }

    .filter-group label {
        display: block;
        font-size: var(--font-size-base);
        font-weight: bold;
        margin-bottom: 0.5rem;
    }

    .filter-group input,
    .filter-group select {
        display: block;
        font-size: var(--font-size-base);
        padding: 0.5rem;
        border: 1px solid var(--color-border);
    }

    .filter-group button {
        font-size: var(--font-size-base);
        padding: 0.5rem 1rem;
        background: transparent;
        color: var(--color-muted);
        border: 1px solid var(--color-border);
        cursor: pointer;
    }

    .filter-group button:hover {
        color: var(--color-base);
        border-color: var(--color-muted);
    }
</style>
